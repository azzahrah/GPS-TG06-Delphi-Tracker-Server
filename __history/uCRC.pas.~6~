unit uCRC;

interface

uses
  idGlobal;

function crc(bytes: TidBytes): word;

implementation

// 16   , 0x1021    , 0xFFFF , 0xFFFF  , true          , true
// width, polynomial, initial, finalXor, inputReflected, resultReflected

procedure calcCRCTable(var table: array of word; castMask, msbMask, polynominal: word);
var
  divident, currByte, bit: word;
begin
  setLength(table, 256);
  for divident := 0 to 255 do begin
    currByte := (divident SHL 8) AND castMask;
    for bit := 0 to 7 do begin
      currByte := currByte SHL 1;
      if (currByte AND msbMask) <> 0 then
        currByte := currByte XOR polynominal
    end;
    table[divident] := currByte AND castMask;
  end;
end;

function Reflect8(b: byte): byte;
var
  i: Integer;
begin
  result := 0;
  for i := 0 to 7 do
  if (b AND (1 SHL i)) <> 0 then
    result := result OR ((1 SHL (7 - i)) AND $ff);
end;

function ReflectGeneric(b, width: byte): byte;
var
  i: Integer;
begin
  result := 0;
  for i := 0 to width - 1 do
  if (b AND (1 SHL i)) <> 0 then
    result := result OR (1 SHL ((width - 1) - i));
end;

function crc(bytes: TidBytes): word;
var
  table: array of word;
  currByte, pos: byte;
  castMask, msbMask, res: word;
  i: Integer;
begin
  castMask := $FFFF;
  msbMask := $01 SHL 15;
  calcCRCTable(table, castMask, msbMask, $1021);
  result := $ffff;
  for i := 0 to length(bytes) - 1 do begin
    currByte := bytes[i];
    currByte := Reflect8(currByte);
    result := (result XOR (currByte SHL 8)) AND castMask;
    pos := (result SHR 8) AND $FF;
    result := (result SHL 8) AND castMask;
    result := (result XOR table[pos]) AND castMask;
    currByte := ReflectGeneric(currByte, 16);
    result := ((result XOR $ffff) AND castMask);
  end;
end;

end.
